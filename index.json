[
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/showandhide/",
	"title": "Show and Hide",
	"tags": [],
	"description": "",
	"content": " The show action let\u0026rsquo;s you show game objects like backgrounds, characters and cgs. The hide action does the contrary, and allows you to hide them.\nBackgrounds Show - show background_id: [WITH transition_id]  The backgrounds will always be behind characters and cgs.\nHide - hide background_id: [WITH transition_id]  If no transition is specified, default transition is FADE (can be changed). Check what other transitions are available.\nCharacters Show - show character_id: [look_id] [WITH transition_id] [AT position] [flipped: true|false]  The characters will always be on top of the backgrounds and behind cgs. If no look is specified, default look is \u0026ldquo;normal\u0026rdquo;. If no position is specified, default position is CENTER. A position can be a coordinate like 400,600 or one of the pre defined positions. The anchor of a character is the center bottom of the sprite (usually the feet), so center position will be center bottom of the screen. Other pre defined positions are:\n CENTER: Center bottom of the screen. LEFT: 1\u0026frasl;6 of the screen width, bottom. OUTLEFT: -1\u0026frasl;6 of the screen width, bottom. Outside of the screen. RIGHT: 5\u0026frasl;6 of the screen width, bottom. OUTRIGHT: 7\u0026frasl;6 of the screen width, bottom. Outside of the screen.  Hide - hide character_id: [WITH transition_id]  If no transition is specified, default transition is CUT (can be changed). Check what other transitions are available.\nShow CGS Show - show cgs_id: [WITH transition_id] [AT position] [zoom: number] [position: coordinate] [angle: number]  The cgs will always be on top of characters and cgs.\nHide - hide cgs_id: [WITH transition_id]  If no transition is specified, default transition is FADE (can be changed). Check what other transitions are available.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "",
	"content": " Developer Guide Make your own game If you\u0026rsquo;re reading this, you\u0026rsquo;re probably thinking about developing a Visual Novel. It doesn\u0026rsquo;t matter if you\u0026rsquo;ve never made a game before, in this guide you\u0026rsquo;ll find how to do it from scratch. You\u0026rsquo;ve probably heard about other game engines, like Unity or Game Maker. Those tools provide a whole environment for developing many kinds of games. RenJS is a bit different. First, RenJS is specially tailored to make games of the Visual Novel genre. You can use it for other kinds of games, but for that you\u0026rsquo;ll need to extend the engine itself. If don\u0026rsquo;t know programming though, you can still write classic VNs easily. The second difference is that RenJS refers only to the code that will be the core of your game. This means, unlike Unity or Game Maker, RenJS doesn\u0026rsquo;t provide a development environment. There\u0026rsquo;s no \u0026ldquo;program\u0026rdquo; you have to install or open to make your game. RenJS is just a bunch of files that know how to read a story and show it in a web browser. To write the story you only need a text processor, even something as simple as Gedit or Notepad.\nThe quickstart is a package with all the necesary files to start creating a game. Besides the RenJS library and it\u0026rsquo;s dependencies, it comes also with a basic GUI (the one used in the tutorial game), one background, one character, and one small \u0026ldquo;hello world\u0026rdquo; scene.\nOnce you download the quickstart, you can play it by opening the \u0026ldquo;index.html\u0026rdquo; file with a web browser (Firefox recommended).\nThere\u0026rsquo;s no text or image processor mandatory for the development, but my recomendations, and the ones I use for developing myself, are Sublime Text and Gimp. They are both free, lightweight and multiplatform.\nIn the next section, we\u0026rsquo;ll see the file structure that makes up the quickstart and which are the files that contain your story.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/sayandtext/",
	"title": "Say and Text",
	"tags": [],
	"description": "",
	"content": " These actions let you show text inside the text box. The difference between them is that the say action will also display the name of the character inside the name box, in the colour of the propery speechText defined for that character.\nText - text: text  Say - character_id says: text  The text will be shown letter by letter inside the text box and after it is displayed whole, the ctc (click to continue) will be shown. After this the game will wait until the player clicks anywhere on the screen to continue with the next action.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/",
	"title": "Actions Guide",
	"tags": [],
	"description": "",
	"content": " Actions Guide Check all the actions you can use Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/playandstop/",
	"title": "Play and Stop",
	"tags": [],
	"description": "",
	"content": " These actions allow you to play and stop background music. Play can be used to play sound effects too. Background music will be looped by default, while sound effects will play only once.\nPlay - play music_id|sfc_id: [WITH transition_id] [looped: true|false]  Stop - stop music_id|sfc_id: [WITH transition_id]  If no transition is specified, default transition is FADE (can be changed). The only other transition available is CUT.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/setup/",
	"title": "Setup",
	"tags": [],
	"description": "",
	"content": " Story Setup How to setup the story Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/choiceandinterrupt/",
	"title": "Choice and Interrupt",
	"tags": [],
	"description": "",
	"content": " The choice action allows you to show a menu of text options. The story will then pause and wait for the player to make a decision.\nEach option has a list of further actions to be executed if it\u0026rsquo;s chosen. After executing those actions, the story will continue with the actions right after the choice action. These ations can be any of the available story actions, including another choice or a scene change. If the scene is changed, the actions after the choice will not be executed, but the scene will change immediately.\nChoice - choice: - option1: - action1 - action2 ... - option2: - action3 - action4 ... - optionN: - actionN - actionN1 ... - actionAfterChoice1 - actionAfterChoice2  Interrupt - interrupt number: - option1: - action1 - action2 ... - option2: - action3 - action4 ... - optionN: - actionN - actionN1 ... - actionAfterInterrupt1 - actionAfterInterrupt2  The interrupt action is very similar to the choice action, but the story will not wait for the player to choose, and instead will continue with the actions after the interrupt while showing the options. The number specified referes to the amount of actions the menu will stay shown. So, if you have an interrupt 5, the menu will be shown for the 5 next actions, in which the player can use them. If the player doesn\u0026rsquo;t choose any option, then they will be hidden.\nConditional options - choice: - option1: - action1 - action2 ... - option2 !if (condition1): - action3 - action4 ... - optionN !if (conditionN): - actionN - actionN1 ... - actionAfterChoice1 - actionAfterChoice2  Sometimes you need to show an option only if a condition is met. In these cases, the conditional option can be used for either choices or interrupts. If the condition is not satisfied, that option will not be shown. Check more about how to make conditions.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/gui/",
	"title": "GUI",
	"tags": [],
	"description": "",
	"content": " GUI How to personalize the GUI Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/quickstart/structure/",
	"title": "File Structure",
	"tags": [],
	"description": "",
	"content": " The quickstart is composed of a few files and folders, including the \u0026ldquo;executable\u0026rdquo; file index.html. Creating a game with RenJS means creating also a web page that runs said game. This allows you to ship your game to any platform that can run a web browser: Linux, Mac, Windows and even mobile devices, without needing to change your code.\nLet\u0026rsquo;s take a look at these files:\n RenJS libs assets story index.html config.js  Index and Config The index.html file is what the web page where the game will be shown. It\u0026rsquo;s contents are minimal. First, it loads the most important library, Phaser, and then the bootstrap for RenJS. In the body of the webpage, the only important element is a div with the id \u0026ldquo;RenJS\u0026rdquo;, which will be used to load the game.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot; /\u0026gt; \u0026lt;title\u0026gt; RenJS \u0026lt;/title\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;libs/phaser.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;config.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;RenJS/RenJSBootstrap.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\t\u0026lt;div id=\u0026quot;RenJS\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  The config file contains very important configuration parameters for starting the game. These are the minimal requirements to create the frame in the web page and start loading its contents.\nvar globalConfig = { w:800, h:600, mode: \u0026quot;AUTO\u0026quot;, splash: { //The \u0026quot;Loading\u0026quot; page for your game loadingScreen: \u0026quot;assets/gui/splash.png\u0026quot;, //splash background loadingBar: { fullBar: \u0026quot;assets/gui/loadingbar.png\u0026quot;, position: {x:111,y:462} } }, fonts: \u0026quot;assets/gui/fonts.css\u0026quot;, guiConfig: \u0026quot;story/GUI.yaml\u0026quot;, storySetup: \u0026quot;story/Setup.yaml\u0026quot;, //as many story text files as you want storyText: [ \u0026quot;story/YourStory.yaml\u0026quot; ], }  First, width and height of the game. You can use any resolution you want, but you\u0026rsquo;ll have to make sure your GUI, backgrounds and other images matchs with it. The mode refers to Phaser\u0026rsquo;s rendering mode. Unless you need to extend RenJS, you shouldn\u0026rsquo;t touch this option. Splash is an image that will be shown while the game is loading. Depending on the size of the assets, it might take a while, so you can also add a loading bar, that will fill up from left to right to show the loading progress. If you show a bar, you will also need to specify where to show it, with the option \u0026ldquo;position\u0026rdquo;. The fonts parameter specifies where to find the fonts.css file. This file is just to load your fonts onto the web page, and make it easier for Phaser to find it and use it to show all the texts in the game. Finally, guiConfig, storySetup and storyText are the files that make up your story, and usually, the files that will change the most (along with the assets) from story to story.\nRenJS The files on the RenJS folder constitute the core of the game engine, the code that interprets your story and shows it to the players. The only one you need to take into account for now is RenJSBootstrap.js. This file is in charge of loading all the other .js files, and also every asset (images, music, etc) used by your game. If you know javascript programming and want to learn more about how it works, the Engine section has comprehensive documentation of the library.\nOther Libraries The files on the libs folder are external libraries that RenJS needs to work properly, the most importan being PhaserJS, the \u0026ldquo;parent\u0026rdquo; engine, that provides the methods for showing images, playing music, etc.\nThe Story and its Assets The assets folder contains all the resources used by your game. This includes the character images, backgrounds, music, etc, and also everything that makes up the GUI, like the menus backgrounds, buttons and everything else. This folder is not mandatory for every game, and neither is the structure followed by this quickstart. Your assets can be anywhere inside the root folder, and organized however you like.\nInside the story folder there are three .yaml files. As with the assets, you don\u0026rsquo;t really need to have them inside this or any folder, but it\u0026rsquo;s a good practice. These three files contain the story, its text and its configuration. You should have one GUI configuration file, one story setup file and as many story text files as you want. You can name these files whatever you like, and it\u0026rsquo;d be a good idea to have descriptive names for each one. The text of your story could be separated in many different files named after the sections of the game it contains, for example:\n intro.yaml path1.yaml path2.yaml endings.yaml  In the next chapter, we\u0026rsquo;ll take a look at the contents of these three files.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/var/",
	"title": "Variables",
	"tags": [],
	"description": "",
	"content": " The var action allows you to store important values during the story. This values then can be display as text or dialogue and can be used to compare and form conditions.\nAsignation To set the value of a variable we use the var action. This kind of action is often called an asignation. An asignation is said to have two parts, left and rigth, separated by a colon. The left part has information about the variable being set, and in our case, also includes the name of the action. The right part contains the value that will be set to that variable. This value can be of three types:\n Number Boolean String  The right part can therefore be text, a number or true|false.\n- var var1: number - var var2: true|false - var var3: text  String variables String variables are text, and can be combined with other variables to make more complex sentences. To use a value on the right part you use the variable name surrounded by curly braces, i.e. {varX}.\n- var name: Spike - var score: 10 - var report: \u0026quot;Hi {name}, you have {score} points!\u0026quot;  Show variables Variables of any kind can be shown with text or say action, in the same way used to conform string variables.\n- text: {report} - spike says: \u0026quot;What? Only {score} points? I though I was doing so well.\u0026quot;  Operations The right part can also be an operation whose result is any of the above mentioned types. These operations use special symbols depending on the type, and can use constant values and other variables.\nArithmetic Operations The first kind of operations are arithmetic: addition, substraction, etc. These operations should resolve to a numberic value.\nThe symbols used for these operations are:\n + (Plus symbol): Means addition. - (Dash symbol): Means substraction. * (Asterisck symbol): Means multiplication. / (Slash symbol): Means division.  The operations also can use parenthesis () to change the solving order of the operation. As with normal arithmetic operations, multiplication and division have precedence over addition and substraction.\n- var var1: 5 - var var1: \u0026quot;{var1} + 1\u0026quot; - var var2: \u0026quot;{var1} * 6\u0026quot; - var var3: \u0026quot;({var1} - {var2})/3\u0026quot;  The right part should usually be between inverted commas. This is because the parser will sometimes freakout if if finds strange symbols. To ensure it reads the whole line as one, better to be safe and surround it by inverted commas.\n Boolean Operations Boolean operations should resolve to a true or false value.\nThe symbols used for these operations are:\n \u0026amp;\u0026amp; (AND): The operation will be true if both values between the AND are true. || (OR): The operation will be true if either value between the OR is true. ! (NOT): The operation will be true if the value next to the NOT is false.  The operations can also use parenthesis () to change the solving order. As with normal logic operations, NOT has precedence over AND, who has precedence over OR.\n- var var1: true - var var2: \u0026quot;!{var1}\u0026quot; - var var3: \u0026quot;{var1} \u0026amp;\u0026amp; {var2}\u0026quot; - var var4: \u0026quot;!({var1} || {var2})\u0026quot;  Another way of getting a boolean value is by comparing numbers and numeric variables. The symbols used for these operations are:\n \u0026gt; (Greater than): The operation will be true if the left value is greater than the right value. \u0026gt;= (Greater than or equal to): The operation will be true if the left value is greater than or equal to the right value. == (Equal): The operation will be true if both values are equal. \u0026lt;= (Less than or equal to): The operation will be true if the left value is less than or equal to the right value. \u0026lt; (Less than): The operation will be true if the left value is less than the right value.  As with the previous operations, parenthesis () are allowed.\n- var var1: 5 - var var2: 7 - var var3: \u0026quot;{var1} \u0026gt; {var2}\u0026quot; - var var4: \u0026quot;({var1}*2) \u0026gt; {var2}) \u0026amp;\u0026amp; ({var2}-2 == {var2})\u0026quot;  String variables can also be compared in this way using the equal operator.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/",
	"title": "RenJS",
	"tags": [],
	"description": "",
	"content": " Welcome What is RenJS RenJS is a Visual Novel engine, meaning a library to make a game of the visual novel genre that can run in a web browser. Inspired by RenPy, it lets you create VNs by writing something like a screenplay, easily and without needing to know how to program. On the other hand, RenJS is powered by PhaserJS, a powerful 2D video game engine for Javascript. If you\u0026rsquo;re a programmer, extending RenJS to add other kinds of game mechanics like hidden object, RPG features, etc, should be very easy.\nIf you haven\u0026rsquo;t played yet the RenJS tutorial, it\u0026rsquo;s a great demonstration of what you can achieve with RenJS, and how to achieve it easily.\nIf you already played it and you\u0026rsquo;re ready to start your own game, head up to the Quickstart.\nIf you\u0026rsquo;re a writer and need help with the syntax, you can find how every available script action works and see examples in the Actions Guide.\nIf you\u0026rsquo;re a designer and need to ajust how the game looks, check the GUI section to understand how you can achieve your prefered look and feel.\nIf you\u0026rsquo;re a programmer and want to extend or understand how RenJS works, the Engine section shows how the whole thing works.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/engine/",
	"title": "Engine",
	"tags": [],
	"description": "",
	"content": " RenJS Engine How the whole thing works Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/quickstart/structure-story/",
	"title": "Story Structure",
	"tags": [],
	"description": "",
	"content": " Now that we know where our story is located, we\u0026rsquo;ll take a look at how it\u0026rsquo;s written down. The story .yaml files are what the writer will be, well, writing, for creating a game. So, let\u0026rsquo;s recap what the story folder should contain:\n The story script: one or more files with the text of the story. The story setup: the link between the story and the assets. For example, it will list who are the characters (the name you will be using in the script to refer to it) and how the character will look (the files with the images for this character). The user interface configuration: Everything else \u0026ldquo;outside\u0026rdquo; of the story, like the game menus, buttons, the dialog text boxes, etc.  If you don\u0026rsquo;t know the Yaml format, it\u0026rsquo;s a very simple configuration format that let\u0026rsquo;s you define properties with key and value. The key is a name, and the value could be any kind of data, including words, numbers, lists or more key-value pairs. The important thing to remember is that indentation is very important. Indentation is the amount of space we let from the start of the line. In Yaml, this space (it can be two spaces, four spaces or a tab character) determines the hierarchy of the properties. For example:\nparentProperty1: prop1: value1 prop2: value2 parentProperty2: prop1: value3 prop2: value4  The User Interface Before thinking about characters, backgrounds and music, we need to setup the look and feel of the game, that is, user interface. The user interface is just as important for the story, since it sets the mood for the player even before she starts playing it. There are many resources about how to choose the best interface for your game. There\u0026rsquo;s also a rich community of visual novel developers who create and distribute their own art and designs, sometimes as free creative commons resources.\nRenJS allows you to set up a really simple user interface, that you can visually alter easily from a gui configuration file (GUI.yaml). In the quickstart, all the user interface assets are inside the asset/gui folder, and these are the minimal assets that you will be needing for any game to work properly. The configuration file then is used to tell the game how and where in the screen all of this assets should be put.\nIt might be hard at first, especially if you\u0026rsquo;re not a graphical designer, to figure out how to make changes to the GUI, but this system allows for a very flexible user interface that will enrich the story you want to tell.\nTo learn more about how to modify the basic UI or create one completely from scratch, the GUI section has all the details about it.\nSetting Up the Story The next file is the story setup (Setup.yaml). In short, this file defines every character, background, etc, and links it with the pertinent asset. When you start writing your story you might not know every element of the story, or not have every asset. This file is not something you create wholly at the start and that\u0026rsquo;s it, but it will evolve with the story. Need a new character? Before using it in the story, you should add it in the setup file.\nThe quickstart code\u0026rsquo;s setup looks like this:\nbackgrounds: room: assets/backgrounds/room_day.jpg characters: deuzi: displayName: Deuzilene speechColour: \u0026quot;#ca90cf\u0026quot; looks: normal: assets/characters/Char3Normal.png happy: assets/characters/Char3Happy.png music: rollingCredits: assets/audio/Evan_Schaeffer_-_01_-_Aqueduct.mp3 morningBGM: assets/audio/Evan_Schaeffer_-_03_-_Glow.mp3  It\u0026rsquo;s simple, small and straightforward. First we define our backgrounds, then our characters, and optionally cgs, music and sound effects. Every kind of object is listed under its key name. For example, under \u0026ldquo;backgrounds\u0026rdquo;, indented by two spaces, we start listing all our different backgrounds. As we said before, in Yaml, indentation is very important. The indentation can be defined by either a \u0026ldquo;tab\u0026rdquo; character or two spaces, but you can not mix the two. So, if you start using tabs, you have to keep using them for the rest of the file. The most usual reason for your game to not load is bad format in one of the Yaml files. There are many online tools to check their syntax, and it\u0026rsquo;s a good practice to verify your game files if your game doesn\u0026rsquo;t load.\nFor most of the elements we only need to specify a name that will be used as a reference in the story file, and a path to an asset. So, in the story, when I want to show the image \u0026ldquo;room_day.jpg\u0026rdquo;, located in the folder assets/backgrounds/, I will simply call it by the name we define here, \u0026ldquo;room\u0026rdquo;. If I want to start playing the audio file \u0026ldquo;morning.mp3\u0026rdquo;, located in the folder \u0026ldquo;assets/audio\u0026rdquo;, I will call it by the name \u0026ldquo;morningBGM\u0026rdquo;.\nYou can use any name you want (without spaces, dashes nor symbols), but it\u0026rsquo;s a good practice to use a meaningful name. I could have a background with the name \u0026ldquo;background1\u0026rdquo;, but that wouldn\u0026rsquo;t be easy to understand when I\u0026rsquo;m writing my story. In the same vein, you can locate your asset files anywhere you want inside the game folder, but it\u0026rsquo;s better to organize them in a folder structure with meaningful names. For example, put all the audio files inside the subfolder audio.\nFor the characters we need more information. The display name will be the actual name of the character, it can have spaces, symbols, and anything you want. This name will be shown inside a little box (called the namebox in the UI) when they talk, so the player can identify when each character is talking during a dialog. The speech colour is a colour in hexadecimal format, and can be use in many ways by the UI, the most usual way is to use it as the text color for either the name or the dialogs of a character.\nFinally, one of the most important aspects of Visual novels is that the characters can show emotions. This is achieved by changing the image for the character. The same thing will be used to change different visual aspects of a character, like their clothes. All the different \u0026ldquo;looks\u0026rdquo; of a character are then listed under the \u0026ldquo;looks\u0026rdquo; keyword, with key name and the file associated to it. You can have a character without any look, for example, if you need an invisible narrator or protagonist.\nThe Story The quickstarts story is really really simple, basically:\n We start playing the music \u0026ldquo;morningBGM\u0026rdquo; We show the background \u0026ldquo;room\u0026rdquo; We show some text, \u0026ldquo;Hello World\u0026rdquo; Then the character \u0026ldquo;deuzi\u0026rdquo; fades in to the center of the screen Deuzi says \u0026ldquo;Welcome to the Quickstart!\u0026rdquo; The game ends with rolling credits like a film  And how do we write our script to do all of this? Just writing each order as something the engine can understad:\nstart: - play morningBGM: - show room: WITH FADE - text: Hello World - show deuzi: happy AT CENTER WITH FADE - deuzi says: Welcome to the Quickstart! - effect ROLLINGCREDITS: endGame: true text: - RenJS developed by - lunafromthemoon - null - Inspired by Ren'Py - Powered by PhaserJS - null - null - background art and cgs by - konett - null - characters by - Shida - null - music by - Evan Schaeffer  The keyword \u0026ldquo;start\u0026rdquo; is the name of the scene. You can have as many scenes as you like and call them whatever you like, but you always need a scene called \u0026ldquo;start\u0026rdquo;, that will be the starting scene of your game. After the scene name, indented by two spaces, and sufixed by one dash, you can start listing all the actions of the scene. The actions are things that RenJS will execute one after the other. There should be an action for anything you want to do in your story. For example, \u0026ldquo;play\u0026rdquo; is an action that will play music, \u0026ldquo;show\u0026rdquo; is an action that will show an image. You can find a list with all the actions in the actions section, and how to use them, but here\u0026rsquo;s the most important actions you can use:\n show: shows images, either backgrounds, characters, cgs, etc. hide: hide images. says: shows some text in the dialog box, displaying the character name into the name box. text: shows only text in the dialog box play: plays music or sound effects stop: stops the music choice: shows options for the player to choose and branch the story scene: change to another scene  You\u0026rsquo;re now ready to start your own game, if you still have doubts, play the tutorial game or check the demos archive!\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/if/",
	"title": "If",
	"tags": [],
	"description": "",
	"content": "The if action allows you to branch your story. The if action contains a condition and a list of actions that will only be executed if the condition is true. Optionally, it can also have a list of actions to execute if the condition is false. Either list of actions can contain whatever action available. After the right actions are done, the story will continue with the actions after the if (or else, if present).\n- if (condition): - action1 - action2 ... [- else: - action3 - action4 ...] - actionAfterIf1 - actionAfterIf2  The condition can be any boolean variable or operation, as seen in the variables section.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/scene/",
	"title": "Scene",
	"tags": [],
	"description": "",
	"content": "The scene action is used to change from one scene to the other. Every scene in the story has a name and a list of actions that conform it. The scenes are not numbered, so to change from one to the other, an explicit call should be made. If no scene is called before the end of the scene, the game will return to the main menu.\nscene1: - action1 - action2 - action3 ... - scene: scene2 scene2: - action4 - action5 ...  "
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/wait/",
	"title": "Wait time or click",
	"tags": [],
	"description": "",
	"content": "The wait action allows you to force the player to wait for some time or until they click anywhere on the screen.\n- wait: number|click  "
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/animate/",
	"title": "Animate",
	"tags": [],
	"description": "",
	"content": "The animate action allows you to animate cgs. The animation can be a tween of the sprite properties, or a spritesheet animation (coming soon). A time should be specified in milliseconds, that will be how long the tween will take to complete.\n- animate cgs_id: time: number [alpha: number] [zoom: number] [position: coordinate] [angle: number]  "
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/call/",
	"title": "Call",
	"tags": [],
	"description": "",
	"content": " The call action allows you to call your very own javascript functions.\n- call function_name: param1: value1 param2: value2 ...  The function must be located in the file RenJS/CustomContent.js, inside the map customContent defined there.\nRenJS.customContent = { //put here your own functions function_name: function (params) { console.log(params.param1); console.log(params.param2); RenJS.resolve(); } }  You can do anything inside this function. The most important thing to remember is to call RenJS.resolve() after all your processing is finished. This usually means it should be at the end of the function, but it could be in a callback for an asynchronous method. The RenJS.resolve() function tells the automat that it can continue with the story and execute the next action after the call.\nInteresting resources RenJS provides all of the information and state of the game for you to use in your own function, some of the most important things to check are:\n RenJS.waitForClick(callback): This function will make the game wait until the player clicks anywhere on the screen. If callback is not defined, the action executed after the click will be RenJS.resolve(). Similar to this function there\u0026rsquo;s also waitTimeout(time,callback) and **waitForClickOrTimeout(time,callback)s. RenJS.logicManager.vars: This is the map of all the story variables set during the game with the action var. RenJS.bgManager.current: The current background sprite. *RenJS.bgManager.backgrounds** contains all of the backgrounds. RenJS.bgManager.showing: A map with all the characters currently on screen with look, position and if it\u0026rsquo;s flipped. RenJS.bgManager.characters contains all of the characters, with name, speechColour and looks (as a map of Sprites). RenJS.cgsManager.current: A map with all the cgs currently on screen. RenJS.bgManager.cgs contains all of the cgs sprites. RenJS.save(slot) and RenJS.load(slot): Saves and load on a specific slot. RenJS.setBlackOverlay() and RenJS.removeBlackOverlay(): Fades in and out a black overlay over everything in the game, including the GUI. RenJS.pause() and RenJS.unpause(): Pauses and unpauses the game. RenJS.onInterpretActions: Map of functions called every time an action is interpreted, meaning on each step of the story. The only defined function at the start of the game is \u0026lsquo;updateStack\u0026rsquo; which controls the execution stack of the story, but you can add and remove functions that would then execute every time an action is interpreted.  Phaser As RenJS is built over Phaser, you can use any Phaser method to do whatever you want. Just be careful not to break everything!\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/effectandambient/",
	"title": "Effects and Ambients",
	"tags": [],
	"description": "",
	"content": " These actions allow you to show visual and sound effects. The difference between them is effect action is an instant effect that ends after its execution, and ambient effects perdure over time. For example, an effect can be a thunder, while an ambient can be rain.\n- ambient ambient_id: param1: value1 param2: value2 - effect effect_id: param3: value3 param4: value4 - ambient CLEAR:  There are a few ambients and effects already coded, but these depend almost entirely on the kind of game you\u0026rsquo;re making. You can check the defined ambients and effects and tailor them to your needs. The effects and ambients usually use extra assets, either images, spritesheets, music and even code. All of this should be loaded in the extra section of the setup file. Check the Setup Guide for more info about this file.\nAmbients The ambients are defined inside the file RenJS/Ambient.js, inside the map called RenJS.ambient. A special ambient called CLEAR takes care of stopping any ambient set before. Other ambients are:\n BGS: Adds a looped background sound and nothing more. The sound id should be specified with the param sfx. RAIN: Starts a particle emitter and background sound for a rain mood. Additional assets:  image:  rain: A sprite of the raindrop.  music:  rain: A loopable audio.   SAKURA: Starts two particle emitters for a cherry blossoms falling ambient. Additional assets:  spritesheet:  sakura: A sprite of the cherry blossom, with 5 frames (17x17 px).   SNOW: Starts three particles emitters for a snowy mood. Additional assets:  spritesheet:  snowflakes: A sprite of the small snowflakes, with 5 frames (17x17 px). snowflakes_large: A sprite of the large snowflakes, with 5 frames (64x64 px).   DRUGS: A strange hallucinogenic effect. No additional assets required. For this effect to work the game mode should be WEBGL (set the game mode on the file RenJSBootstrap.js). BADTRIP: An extra effect to call after the DRUGS effect.  To make your own effect you can either modify the ones already coded, or make a completely different thing taking advantage of the visual effects and sprite manipulation capabilities of Phaser. The only thing you should remember is to call the funtion RenJS.resolve() when you finish. This function tells the automat that controls the story that it can continue with the next action. Another usefull thing is to add a function to call when the ambient is cleared. You can push a function to RenJS.ambient.clearFunctions and it will be called when the ambient CLEAR is set. This way you can destroy any sprite, stop any music, etc, that your ambient uses.\nEffects Very similar to ambients, the effects are defined inside the RenJS/Effects.js file. Some of the effects available are:\n SHAKE: Screen shake! SOUND: It takes a param with the name sfx and reproduces it. It\u0026rsquo;s the same as the play action. ROLLINGCREDITS: Sets a black screen and shows a list of text defined on the param text. It also takes the param endGame to directly end the game after the effect is over. The text list can have null lines that will be empty lines.  - effect ROLLINGCREDITS: endGame: true text: - Thank you for playing - Game Name - null - made by - lunafromthemoon - null - with - RenJS - null - whatever else you want to say   SHOWTITLE: Shows an image with a title and subtitle overimposed. The image should be loaded with the name title. The params title and subtitle will be shown in the middle of the image, with the first font defined in the Setup file. You can play with this effect and make up the titles however you like. THUNDER: Quickly shows and hides a thunder image, accompanied by a thunder sound effect. Needs extra parameters:  image:  thunder: The thunder image.  sfx:  thunderSFX: The thunder sound.   EXPLOSION: Shows an explosion animation, with an explosion sound. Needs extra parameters:  spritesheet:  explosion: The explosion animation (274x300px).  sfx:  explosionSound: The explosion sound.    "
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/actions/transitions/",
	"title": "Transitions",
	"tags": [],
	"description": "",
	"content": "Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]