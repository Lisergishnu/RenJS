[
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/showandhide/",
	"title": "Show and Hide",
	"tags": [],
	"description": "",
	"content": " The show action let\u0026rsquo;s you show game objects like backgrounds, characters and cgs. The hide action does the contrary, and allows you to hide them.\nBackgrounds Show - show background_id: [WITH transition_id]  The backgrounds will always be behind characters and cgs.\nHide - hide background_id: [WITH transition_id]  If no transition is specified, default transition is FADE (can be changed). Check what other transitions are available.\nCharacters Show - show character_id: [look_id] [WITH transition_id] [AT position] [flipped: true|false]  The characters will always be on top of the backgrounds and behind cgs. If no look is specified, default look is \u0026ldquo;normal\u0026rdquo;. If no position is specified, default position is CENTER. A position can be a coordinate like 400,600 or one of the pre defined positions. The anchor of a character is the center bottom of the sprite (usually the feet), so center position will be center bottom of the screen. Other pre defined positions are:\n CENTER: Center bottom of the screen. LEFT: 1\u0026frasl;6 of the screen width, bottom. OUTLEFT: -1\u0026frasl;6 of the screen width, bottom. Outside of the screen. RIGHT: 5\u0026frasl;6 of the screen width, bottom. OUTRIGHT: 7\u0026frasl;6 of the screen width, bottom. Outside of the screen.  Hide - hide character_id: [WITH transition_id]  If no transition is specified, default transition is CUT (can be changed). Check what other transitions are available.\nShow CGS Show - show cgs_id: [WITH transition_id] [AT position] [zoom: number] [position: coordinate] [angle: number]  The cgs will always be on top of characters and cgs.\nHide - hide cgs_id: [WITH transition_id]  If no transition is specified, default transition is FADE (can be changed). Check what other transitions are available.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/intro/",
	"title": "Intro",
	"tags": [],
	"description": "",
	"content": " Intro What is RenJS Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/sayandtext/",
	"title": "Say and Text",
	"tags": [],
	"description": "",
	"content": " These actions let you show text inside the text box. The difference between them is that the say action will also display the name of the character inside the name box, in the colour of the propery speechText defined for that character.\nText - text: text  Say - character_id says: text  The text will be shown letter by letter inside the text box and after it is displayed whole, the ctc (click to continue) will be shown. After this the game will wait until the player clicks anywhere on the screen to continue with the next action.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " Story API Check all the actions you can use Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/playandstop/",
	"title": "Play and Stop",
	"tags": [],
	"description": "",
	"content": " These actions allow you to play and stop background music. Play can be used to play sound effects too. Background music will be looped by default, while sound effects will play only once.\nPlay - play music_id|sfc_id: [WITH transition_id] [looped: true|false]  Stop - stop music_id|sfc_id: [WITH transition_id]  If no transition is specified, default transition is FADE (can be changed). The only other transition available is CUT.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/setup/",
	"title": "Setup",
	"tags": [],
	"description": "",
	"content": " Story Setup How to setup the story Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/choiceandinterrupt/",
	"title": "Choice and Interrupt",
	"tags": [],
	"description": "",
	"content": " The choice action allows you to show a menu of text options. The story will then pause and wait for the player to make a decision.\nEach option has a list of further actions to be executed if it\u0026rsquo;s chosen. After executing those actions, the story will continue with the actions right after the choice action. These ations can be any of the available story actions, including another choice or a scene change. If the scene is changed, the actions after the choice will not be executed, but the scene will change immediately.\nChoice - choice: - option1: - action1 - action2 ... - option2: - action3 - action4 ... - optionN: - actionN - actionN1 ... - actionAfterChoice1 - actionAfterChoice2  Interrupt - interrupt number: - option1: - action1 - action2 ... - option2: - action3 - action4 ... - optionN: - actionN - actionN1 ... - actionAfterInterrupt1 - actionAfterInterrupt2  The interrupt action is very similar to the choice action, but the story will not wait for the player to choose, and instead will continue with the actions after the interrupt while showing the options. The number specified referes to the amount of actions the menu will stay shown. So, if you have an interrupt 5, the menu will be shown for the 5 next actions, in which the player can use them. If the player doesn\u0026rsquo;t choose any option, then they will be hidden.\nConditional options - choice: - option1: - action1 - action2 ... - option2 !if (condition1): - action3 - action4 ... - optionN !if (conditionN): - actionN - actionN1 ... - actionAfterChoice1 - actionAfterChoice2  Sometimes you need to show an option only if a condition is met. In these cases, the conditional option can be used for either choices or interrupts. If the condition is not satisfied, that option will not be shown. Check more about how to make conditions.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/gui/",
	"title": "GUI",
	"tags": [],
	"description": "",
	"content": " GUI How to personalize the GUI Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/var/",
	"title": "Variables",
	"tags": [],
	"description": "",
	"content": " The var action allows you to store important values during the story. This values then can be display as text or dialogue and can be used to compare and form conditions.\nAsignation To set the value of a variable we use the var action. This kind of action is often called an asignation. An asignation is said to have two parts, left and rigth, separated by a colon. The left part has information about the variable being set, and in our case, also includes the name of the action. The right part contains the value that will be set to that variable. This value can be of three types:\n Number Boolean String  The right part can therefore be text, a number or true|false.\n- var var1: number - var var2: true|false - var var3: text  String variables String variables are text, and can be combined with other variables to make more complex sentences. To use a value on the right part you use the variable name surrounded by curly braces, i.e. {varX}.\n- var name: Spike - var score: 10 - var report: \u0026quot;Hi {name}, you have {score} points!\u0026quot;  Show variables Variables of any kind can be shown with text or say action, in the same way used to conform string variables.\n- text: {report} - spike says: \u0026quot;What? Only {score} points? I though I was doing so well.\u0026quot;  Operations The right part can also be an operation whose result is any of the above mentioned types. These operations use special symbols depending on the type, and can use constant values and other variables.\nArithmetic Operations The first kind of operations are arithmetic: addition, substraction, etc. These operations should resolve to a numberic value.\nThe symbols used for these operations are:\n + (Plus symbol): Means addition. - (Dash symbol): Means substraction. * (Asterisck symbol): Means multiplication. / (Slash symbol): Means division.  The operations also can use parenthesis () to change the solving order of the operation. As with normal arithmetic operations, multiplication and division have precedence over addition and substraction.\n- var var1: 5 - var var1: \u0026quot;{var1} + 1\u0026quot; - var var2: \u0026quot;{var1} * 6\u0026quot; - var var3: \u0026quot;({var1} - {var2})/3\u0026quot;  The right part should usually be between inverted commas. This is because the parser will sometimes freakout if if finds strange symbols. To ensure it reads the whole line as one, better to be safe and surround it by inverted commas.\n Boolean Operations Boolean operations should resolve to a true or false value.\nThe symbols used for these operations are:\n \u0026amp;\u0026amp; (AND): The operation will be true if both values between the AND are true. || (OR): The operation will be true if either value between the OR is true. ! (NOT): The operation will be true if the value next to the NOT is false.  The operations can also use parenthesis () to change the solving order. As with normal logic operations, NOT has precedence over AND, who has precedence over OR.\n- var var1: true - var var2: \u0026quot;!{var1}\u0026quot; - var var3: \u0026quot;{var1} \u0026amp;\u0026amp; {var2}\u0026quot; - var var4: \u0026quot;!({var1} || {var2})\u0026quot;  Another way of getting a boolean value is by comparing numbers and numeric variables. The symbols used for these operations are:\n \u0026gt; (Greater than): The operation will be true if the left value is greater than the right value. \u0026gt;= (Greater than or equal to): The operation will be true if the left value is greater than or equal to the right value. == (Equal): The operation will be true if both values are equal. \u0026lt;= (Less than or equal to): The operation will be true if the left value is less than or equal to the right value. \u0026lt; (Less than): The operation will be true if the left value is less than the right value.  As with the previous operations, parenthesis () are allowed.\n- var var1: 5 - var var2: 7 - var var3: \u0026quot;{var1} \u0026gt; {var2}\u0026quot; - var var4: \u0026quot;({var1}*2) \u0026gt; {var2}) \u0026amp;\u0026amp; ({var2}-2 == {var2})\u0026quot;  String variables can also be compared in this way using the equal operator.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/",
	"title": "RenJS",
	"tags": [],
	"description": "",
	"content": " Welcome to RenJS "
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/engine/",
	"title": "Engine",
	"tags": [],
	"description": "",
	"content": " RenJS Engine How the whole thing works Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/if/",
	"title": "If",
	"tags": [],
	"description": "",
	"content": "The if action allows you to branch your story. The if action contains a condition and a list of actions that will only be executed if the condition is true. Optionally, it can also have a list of actions to execute if the condition is false. Either list of actions can contain whatever action available. After the right actions are done, the story will continue with the actions after the if (or else, if present).\n- if (condition): - action1 - action2 ... [- else: - action3 - action4 ...] - actionAfterIf1 - actionAfterIf2  The condition can be any boolean variable or operation, as seen in the variables section.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/scene/",
	"title": "Scene",
	"tags": [],
	"description": "",
	"content": "The scene action is used to change from one scene to the other. Every scene in the story has a name and a list of actions that conform it. The scenes are not numbered, so to change from one to the other, an explicit call should be made. If no scene is called before the end of the scene, the game will return to the main menu.\nscene1: - action1 - action2 - action3 ... - scene: scene2 scene2: - action4 - action5 ...  "
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/wait/",
	"title": "Wait time or click",
	"tags": [],
	"description": "",
	"content": "The wait action allows you to force the player to wait for some time or until they click anywhere on the screen.\n- wait: number|click  "
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/animate/",
	"title": "Animate",
	"tags": [],
	"description": "",
	"content": "The animate action allows you to animate cgs. The animation can be a tween of the sprite properties, or a spritesheet animation (coming soon). A time should be specified in milliseconds, that will be how long the tween will take to complete.\n- animate cgs_id: time: number [alpha: number] [zoom: number] [position: coordinate] [angle: number]  "
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/call/",
	"title": "Call",
	"tags": [],
	"description": "",
	"content": " The call action allows you to call your very own javascript functions.\n- call function_name: param1: value1 param2: value2 ...  The function must be located in the file RenJS/CustomContent.js, inside the map customContent defined there.\nRenJS.customContent = { //put here your own functions function_name: function (params) { console.log(params.param1); console.log(params.param2); RenJS.resolve(); } }  You can do anything inside this function. The most important thing to remember is to call RenJS.resolve() after all your processing is finished. This usually means it should be at the end of the function, but it could be in a callback for an asynchronous method. The RenJS.resolve() function tells the automat that it can continue with the story and execute the next action after the call.\nInteresting resources RenJS provides all of the information and state of the game for you to use in your own function, some of the most important things to check are:\n RenJS.waitForClick(callback): This function will make the game wait until the player clicks anywhere on the screen. If callback is not defined, the action executed after the click will be RenJS.resolve(). Similar to this function there\u0026rsquo;s also waitTimeout(time,callback) and **waitForClickOrTimeout(time,callback)s. RenJS.logicManager.vars: This is the map of all the story variables set during the game with the action var. RenJS.bgManager.current: The current background sprite. *RenJS.bgManager.backgrounds** contains all of the backgrounds. RenJS.bgManager.showing: A map with all the characters currently on screen with look, position and if it\u0026rsquo;s flipped. RenJS.bgManager.characters contains all of the characters, with name, speechColour and looks (as a map of Sprites). RenJS.cgsManager.current: A map with all the cgs currently on screen. RenJS.bgManager.cgs contains all of the cgs sprites. RenJS.save(slot) and RenJS.load(slot): Saves and load on a specific slot. RenJS.setBlackOverlay() and RenJS.removeBlackOverlay(): Fades in and out a black overlay over everything in the game, including the GUI. RenJS.pause() and RenJS.unpause(): Pauses and unpauses the game. RenJS.onInterpretActions: Map of functions called every time an action is interpreted, meaning on each step of the story. The only defined function at the start of the game is \u0026lsquo;updateStack\u0026rsquo; which controls the execution stack of the story, but you can add and remove functions that would then execute every time an action is interpreted.  Phaser As RenJS is built over Phaser, you can use any Phaser method to do whatever you want. Just be careful not to break everything!\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/effectandambient/",
	"title": "Effects and Ambients",
	"tags": [],
	"description": "",
	"content": " These actions allow you to show visual and sound effects. The difference between them is effect action is an instant effect that ends after its execution, and ambient effects perdure over time. For example, an effect can be a thunder, while an ambient can be rain.\n- ambient ambient_id: param1: value1 param2: value2 - effect effect_id: param3: value3 param4: value4 - ambient CLEAR:  There are a few ambients and effects already coded, but these depend almost entirely on the kind of game you\u0026rsquo;re making. You can check the defined ambients and effects and tailor them to your needs. The effects and ambients usually use extra assets, either images, spritesheets, music and even code. All of this should be loaded in the extra section of the setup file. Check the Setup Guide for more info about this file.\nAmbients The ambients are defined inside the file RenJS/Ambient.js, inside the map called RenJS.ambient. A special ambient called CLEAR takes care of stopping any ambient set before. Other ambients are:\n BGS: Adds a looped background sound and nothing more. The sound id should be specified with the param sfx. RAIN: Starts a particle emitter and background sound for a rain mood. Additional assets:  image:  rain: A sprite of the raindrop.  music:  rain: A loopable audio.   SAKURA: Starts two particle emitters for a cherry blossoms falling ambient. Additional assets:  spritesheet:  sakura: A sprite of the cherry blossom, with 5 frames (17x17 px).   SNOW: Starts three particles emitters for a snowy mood. Additional assets:  spritesheet:  snowflakes: A sprite of the small snowflakes, with 5 frames (17x17 px). snowflakes_large: A sprite of the large snowflakes, with 5 frames (64x64 px).   DRUGS: A strange hallucinogenic effect. No additional assets required. For this effect to work the game mode should be WEBGL (set the game mode on the file RenJSBootstrap.js). BADTRIP: An extra effect to call after the DRUGS effect.  To make your own effect you can either modify the ones already coded, or make a completely different thing taking advantage of the visual effects and sprite manipulation capabilities of Phaser. The only thing you should remember is to call the funtion RenJS.resolve() when you finish. This function tells the automat that controls the story that it can continue with the next action. Another usefull thing is to add a function to call when the ambient is cleared. You can push a function to RenJS.ambient.clearFunctions and it will be called when the ambient CLEAR is set. This way you can destroy any sprite, stop any music, etc, that your ambient uses.\nEffects Very similar to ambients, the effects are defined inside the RenJS/Effects.js file. Some of the effects available are:\n SHAKE: Screen shake! SOUND: It takes a param with the name sfx and reproduces it. It\u0026rsquo;s the same as the play action. ROLLINGCREDITS: Sets a black screen and shows a list of text defined on the param text. It also takes the param endGame to directly end the game after the effect is over. The text list can have null lines that will be empty lines.  - effect ROLLINGCREDITS: endGame: true text: - Thank you for playing - Game Name - null - made by - lunafromthemoon - null - with - RenJS - null - whatever else you want to say   SHOWTITLE: Shows an image with a title and subtitle overimposed. The image should be loaded with the name title. The params title and subtitle will be shown in the middle of the image, with the first font defined in the Setup file. You can play with this effect and make up the titles however you like. THUNDER: Quickly shows and hides a thunder image, accompanied by a thunder sound effect. Needs extra parameters:  image:  thunder: The thunder image.  sfx:  thunderSFX: The thunder sound.   EXPLOSION: Shows an explosion animation, with an explosion sound. Needs extra parameters:  spritesheet:  explosion: The explosion animation (274x300px).  sfx:  explosionSound: The explosion sound.    "
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/api/transitions/",
	"title": "Transitions",
	"tags": [],
	"description": "",
	"content": "Lorem Ipsum.\n"
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://lunafromthemoon.github.io/RenJS/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]